function Compute_CC ( Graph g,propNode <float> CC){
    g.attachNodeProperty (CC = 0);
    int V = g.num_nodes();
    node src=0;
   
    do{                     
        propNode<int> dist;
        propNode<bool> modified;
        g.attachNodeProperty(dist = INF, modified = False);
        src.modified = True;
        src.dist = 0;
        bool finished = False;
        fixedPoint until(finished : !modified){
            forall(p in g.nodes().filter(modified == True)){
                forall(nbr in g.neighbors(p)){
                    edge e = g.get_edge(p, nbr);
                    <nbr.dist, nbr.modified> = <Min(nbr.dist, p.dist + e.weight), True>;
                }
            }
        }   
        float temp=0;
        forall (dst in g.nodes().filter(dist != INF)) {
            temp += dst.dist;
        }
        src.CC = (1/temp);
        src=src+1 ; 
    }while(src<V);
}